{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["BigInt","JSBI","App","_useState","useState","_useState2","Object","_home_oldcook_codrill_rust_wavechat_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_slicedToArray__WEBPACK_IMPORTED_MODULE_3__","host","setHost","_useState3","Buffer","from","Wavelet","generateNewWallet","secretKey","toString","_useState4","privateKey","setPrivateKey","_useState5","undefined","_useState6","client","setClient","_useState7","_useState8","node","setNodeInfo","_useState9","_useState10","contractAddress","setContractAddress","_useState11","_useState12","contract","setContract","_useState13","_useState14","message","setMessage","_useState15","_useState16","chatLogs","setChatLogs","_useState17","_useState18","account","setAccount","_useState19","_useState20","contractAccount","setContractAccount","accountRef","useRef","contractAccountRef","useEffect","current","_useState21","accounts","consensus","_useState22","sockets","setSockets","socketsRef","reset","close","connect","_ref","_home_oldcook_codrill_rust_wavechat_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_asyncToGenerator__WEBPACK_IMPORTED_MODULE_2__","_home_oldcook_codrill_rust_wavechat_node_modules_babel_preset_react_app_node_modules_babel_runtime_regenerator__WEBPACK_IMPORTED_MODULE_0___default","a","mark","_callee","_client","wallet","walletAddress","wrap","_context","prev","next","t0","getNodeInfo","t1","sent","loadWalletFromPrivateKey","publicKey","t2","getAccount","t3","pollAccounts","onAccountUpdated","msg","event","_home_oldcook_codrill_rust_wavechat_node_modules_babel_preset_react_app_node_modules_babel_runtime_helpers_esm_objectSpread__WEBPACK_IMPORTED_MODULE_1__","balance","id","t4","alert","stop","apply","this","arguments","load","_ref2","_callee3","_context3","Contract","init","pollConsensus","onRoundEnded","_","_callee2","_context2","fetchAndPopulateMemoryPages","test","logs","gas_balance","sendMessage","_ref4","_callee4","_context4","call","type","value","react__WEBPACK_IMPORTED_MODULE_4___default","createElement","Fragment","className","_rebass_grid__WEBPACK_IMPORTED_MODULE_7__","mb","href","alignItems","flex","disabled","data-lpignore","onChange","evt","target","width","onKeyPress","_ref5","_callee5","e","_context5","key","_x","style","minWidth","ml","onClick","length","placeholder","_ref6","_callee6","_context6","_x2","wavelet_faucet__WEBPACK_IMPORTED_MODULE_6__","modalHeader","theme","themes","mono","position","right","bottom","address","public_key","title","concat","pr","maxLength","preventDefault","height","rows","readOnly","Boolean","window","location","hostname","match","ReactDOM","render","react_default","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.38ce0a1b.chunk.js","sourcesContent":["import React, {useEffect, useRef, useState} from 'react';\nimport {Contract, Wavelet} from 'wavelet-client';\nimport {FaucetButton} from \"wavelet-faucet\";\nimport {themes} from \"wavelet-faucet\"\nimport {Box, Flex} from '@rebass/grid';\nimport JSBI from 'jsbi';\n\nconst BigInt = JSBI.BigInt;\n\nconst App = () => {\n    const [host, setHost] = useState('https://testnet.perlin.net');\n    const [privateKey, setPrivateKey] = useState(\n        Buffer.from(Wavelet.generateNewWallet().secretKey, 'binary').toString('hex')\n    );\n    const [client, setClient] = useState(undefined);\n    const [node, setNodeInfo] = useState(undefined);\n    const [contractAddress, setContractAddress] = useState(\n        '74c566f88801646cc0fea0683a75fba9f5d0757b04fc0a1c679ede469cc4d4c9'\n    );\n    const [contract, setContract] = useState(undefined);\n    const [message, setMessage] = useState('');\n    const [chatLogs, setChatLogs] = useState([]);\n\n    const [account, setAccount] = useState(undefined);\n    const [contractAccount, setContractAccount] = useState(undefined);\n\n    const accountRef = useRef(account);\n    const contractAccountRef = useRef(contractAccount);\n\n    useEffect(() => {\n        accountRef.current = account;\n    }, [account]);\n\n    useEffect(() => {\n        contractAccountRef.current = contractAccount;\n    }, [contractAccount])\n\n    const [sockets, setSockets] = useState({\n        accounts: undefined,\n        contract: undefined,\n        consensus: undefined\n    });\n\n    const socketsRef = useRef(sockets);\n    useEffect(() => {\n        socketsRef.current = sockets;\n    }, [sockets]);\n\n    const reset = () => {\n        setClient(undefined);\n        setAccount(undefined);\n        setContractAccount(undefined);\n        setNodeInfo(undefined);\n\n        setContract(undefined);\n        setContractAddress('');\n        setMessage('');\n        setChatLogs([]);\n\n        const sockets = socketsRef.current;\n\n        if (sockets.accounts) {\n            sockets.accounts.close(1000, 'connection closing normally');\n        }\n\n        if (sockets.contract) {\n            sockets.contract.close(1000, 'connection closing normally');\n        }\n\n        if (sockets.consensus) {\n            sockets.consensus.close(1000, 'connection closing normally');\n        }\n\n        setSockets({accounts: undefined, consensus: undefined});\n    };\n\n    const connect = async () => {\n        if (client === undefined) {\n            try {\n                const client = new Wavelet(host);\n                setNodeInfo(await client.getNodeInfo());\n\n                const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n                const walletAddress = Buffer.from(wallet.publicKey).toString('hex');\n                setAccount(await client.getAccount(walletAddress));\n\n                setClient(client);\n\n                sockets.accounts = await client.pollAccounts(\n                    {\n                        onAccountUpdated: msg => {\n                            switch (msg.event) {\n                                case 'balance_updated': {\n                                    setAccount({...accountRef.current, balance: msg.balance});\n                                    break;\n                                }\n                                default: {\n                                    break;\n                                }\n                            }\n                        }\n                    },\n                    {id: walletAddress}\n                );\n\n                setSockets(sockets);\n            } catch (error) {\n                reset();\n                alert(error);\n            }\n        } else {\n            reset();\n        }\n    };\n\n    const load = async () => {\n        setContractAccount(await client.getAccount(contractAddress));\n\n        // Initialize\n        const contract = new Contract(client, contractAddress);\n        await contract.init();\n\n        const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n\n        // Every single time consensus happens on Wavelet, query for the latest\n        // chat logs by calling 'get_messages()' on the smart contract.\n\n        sockets.consensus = await client.pollConsensus({\n            onRoundEnded: _ => {\n                if (contract === undefined) {\n                    return;\n                }\n\n                (async () => {\n                    await contract.fetchAndPopulateMemoryPages();\n                    setChatLogs(contract.test(wallet, 'get_messages', BigInt(0)).logs);\n                })();\n            }\n        });\n\n        sockets.contract = await client.pollAccounts(\n            {\n                onAccountUpdated: msg => {\n                    switch (msg.event) {\n                        case 'gas_balance_updated': {\n                            setContractAccount({...contractAccountRef.current, gas_balance: msg.gas_balance});\n                            break;\n                        }\n                        default: {\n                            break;\n                        }\n                    }\n                }\n            },\n            {id: contractAddress}\n        );\n\n        setSockets(sockets);\n\n        setChatLogs(contract.test(wallet, 'get_messages', BigInt(0)).logs);\n        setContract(contract);\n    };\n\n    const sendMessage = async () => {\n        const wallet = Wavelet.loadWalletFromPrivateKey(privateKey);\n        await contract.call(wallet, 'send_message', BigInt(0), BigInt(250000), BigInt(0), {\n            type: 'string',\n            value: message\n        });\n\n        setMessage('');\n    };\n\n    return (\n        <>\n            <h2 className=\"text-center title\">\n                A decentralized chat written in JavaScript + Rust (WebAssembly).\n            </h2>\n            <Box className=\"text-center\" mb={4}>\n                Powered by <a href=\"https://wavelet.perlin.net\">Wavelet</a>. Join our{' '}\n                <a href=\"https://discord.gg/dMYfDPM\">Discord</a> to get PERLs.\n            </Box>\n            <Flex mb={2} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[secret]</label>\n                </Box>\n                <Box flex=\"1\">\n                    <input\n                        type=\"text\"\n                        value={privateKey}\n                        disabled={client}\n                        data-lpignore=\"true\"\n                        onChange={evt => setPrivateKey(evt.target.value)}\n                    />\n                </Box>\n            </Flex>\n\n            <Flex mb={2} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[node]</label>\n                </Box>\n                <Box flex=\"1\">\n                    <Flex width={1}>\n                        <Box width={9 / 12}>\n                            <input\n                                type=\"text\"\n                                value={host}\n                                disabled={client}\n                                data-lpignore=\"true\"\n                                onKeyPress={async e => {\n                                    if (e.key === 'Enter') {\n                                        await connect();\n                                    }\n                                }}\n                                onChange={evt => setHost(evt.target.value)}\n                            />\n                        </Box>\n                        <Box width={3 / 12} style={{minWidth: '10em'}} ml={2}>\n                            <button\n                                style={{width: '100%'}}\n                                onClick={connect}\n                                disabled={privateKey.length !== 128}\n                            >\n                                {client ? 'Disconnect' : 'Connect'}\n                            </button>\n                        </Box>\n                    </Flex>\n                </Box>\n            </Flex>\n\n            <Flex mb={4} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[contract]</label>\n                </Box>\n                <Box flex=\"1\">\n                    <Flex width={1}>\n                        <Box width={9 / 12}>\n                            <input\n                                type=\"text\"\n                                value={contractAddress}\n                                placeholder=\"input chat smart contract address...\"\n                                disabled={!client}\n                                data-lpignore=\"true\"\n                                onKeyPress={async e => {\n                                    if (e.key === 'Enter') await load();\n                                }}\n                                onChange={evt => setContractAddress(evt.target.value)}\n                            />\n                        </Box>\n                        <Box width={3 / 12} style={{minWidth: '10em'}} ml={2}>\n                            <button\n                                style={{width: \"100%\"}}\n                                disabled={!client || contractAddress.length !== 64}\n                                onClick={load}\n                            >\n                                Load Contract\n                            </button>\n                        </Box>\n                    </Flex>\n                </Box>\n            </Flex>\n\n            <FaucetButton modalHeader theme={themes.mono} style={{position: 'fixed', right: '100px', bottom: '0px'}} address={account && account.public_key}/>\n\n            <Flex mb={2} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[node id]</label>\n                </Box>\n                <Box flex=\"1\" style={{minWidth: 0}}>\n          <span\n              className=\"truncate\"\n              title={`${node && node.public_key ? node.public_key : '???'}`}\n          >{`${node && node.public_key ? node.public_key : '???'}`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={2} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[your id]</label>\n                </Box>\n                <Box flex=\"1\" style={{minWidth: 0}}>\n          <span\n              className=\"truncate\"\n              title={`${\n                  account && account.public_key ? account.public_key : '???'\n                  }`}\n          >{`${\n              account && account.public_key ? account.public_key : '???'\n              }`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={2} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[your balance]</label>\n                </Box>\n                <Box flex=\"1\">\n          <span>{`${\n              account && account.balance ? account.balance : 0\n              } PERL(s)`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={4} alignItems=\"center\">\n                <Box flex=\"0 0 150px\">\n                    <label>[contract gas balance]</label>\n                </Box>\n                <Box flex=\"1\">\n          <span>{`${\n              contractAccount && contractAccount.gas_balance ? contractAccount.gas_balance : 0\n              } PERL(s)`}</span>\n                </Box>\n            </Flex>\n\n            <Flex mb={3}>\n                <Box flex=\"1\" pr={2}>\n          <textarea\n              disabled={!client || !contract}\n              value={message}\n              placeholder=\"Ennter a message...\"\n              maxLength={240}\n              onKeyPress={e => {\n                  if (e.key === 'Enter') {\n                      if (\n                          account.balance > 2 &&\n                          contractAccount.gas_balance + account.balance >= 250000 &&\n                          message.length > 0 &&\n                          message.length <= 240\n                      ) {\n                          sendMessage();\n                      } else {\n                          e.preventDefault();\n                      }\n                  }\n              }}\n              onChange={evt => setMessage(evt.target.value)}\n              className=\"fw\"\n          />\n                </Box>\n                <Box flex=\"0 0 220px\">\n                    <button\n                        className=\"fw\"\n                        style={{height: \"98%\"}}\n                        disabled={\n                            !client ||\n                            !contract ||\n                            !account ||\n                            account.balance < 2 ||\n                            contractAccount.gas_balance + account.balance < 250000 ||\n                            message.length === 0\n                        }\n                        onClick={sendMessage}\n                    >\n                        Send Message [2 PERLs]\n                    </button>\n                </Box>\n            </Flex>\n\n            <textarea\n                disabled={!client || !contract}\n                className=\"fw\"\n                rows={35}\n                readOnly\n                placeholder=\"no messages here so far chief...\"\n                value={chatLogs.length === 1 ? chatLogs[0] : ''}\n            />\n        </>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}